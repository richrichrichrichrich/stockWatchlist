@page "/config"

@using AsxWatchlist.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject IHttpClientFactory ClientFactory
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavManager

<h3>‚öôÔ∏è Configuration Settings</h3>

@if (isLoading)
{
    <p>‚è≥ Loading config...</p>
}
else
{
    <EditForm Model="config" OnValidSubmit="SaveConfig">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Default Trade Amount</label>
            <InputNumber @bind-Value="config.DefaultTradeAmount" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Max Holding Amount</label>
            <InputNumber @bind-Value="config.MaxHoldingAmount" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Check Trade Frequency</label>
            <InputSelect @bind-Value="config.CheckTradeFrequency" class="form-control">
                @foreach (var option in FrequencyOptions)
                {
                    <option value="@option">@option</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label>Check Holdings Frequency</label>
            <InputSelect @bind-Value="config.CheckHoldingsFrequency" class="form-control">
                @foreach (var option in FrequencyOptions)
                {
                    <option value="@option">@option</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label>Default Expiry Length (days)</label>
            <InputNumber @bind-Value="config.DefaultExpiryLengthDays" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Trading Day Start Time</label>
            <InputText @bind-Value="config.TradingDayStartString" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Trading Day End Time</label>
            <InputText @bind-Value="config.TradingDayEndString" class="form-control" />
        </div>

        <fieldset class="mb-3">
            <legend>Days of Week to Check</legend>

            <div class="form-check">
                <InputCheckbox @bind-Value="config.CheckMonday" class="form-check-input" />
                <label class="form-check-label">Monday</label>
            </div>
            <div class="form-check">
                <InputCheckbox @bind-Value="config.CheckTuesday" class="form-check-input" />
                <label class="form-check-label">Tuesday</label>
            </div>
            <div class="form-check">
                <InputCheckbox @bind-Value="config.CheckWednesday" class="form-check-input" />
                <label class="form-check-label">Wednesday</label>
            </div>
            <div class="form-check">
                <InputCheckbox @bind-Value="config.CheckThursday" class="form-check-input" />
                <label class="form-check-label">Thursday</label>
            </div>
            <div class="form-check">
                <InputCheckbox @bind-Value="config.CheckFriday" class="form-check-input" />
                <label class="form-check-label">Friday</label>
            </div>
            <div class="form-check">
                <InputCheckbox @bind-Value="config.CheckSaturday" class="form-check-input" />
                <label class="form-check-label">Saturday</label>
            </div>
            <div class="form-check">
                <InputCheckbox @bind-Value="config.CheckSunday" class="form-check-input" />
                <label class="form-check-label">Sunday</label>
            </div>
            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="config.ShowOneExpandedTicker" class="form-check-input" />
                <label class="form-check-label">
                    Show one expanded Ticker at a time on the Watchlist page
                </label>
            </div>
            <div class="mb-3">
                <label>Stop Loss Default (% below buy price)</label>
                <InputNumber @bind-Value="config.StopLossPercent" class="form-control" />
            </div>


        </fieldset>

        <button class="btn btn-success me-2" type="submit">üíæ Save</button>
        <button class="btn btn-secondary" type="button" @onclick="Reset">‚Ü©Ô∏è Cancel</button>
    </EditForm>
}

@code {
    private UserConfig config = new();
    private bool isLoading = true;

    private readonly List<string> FrequencyOptions = new()
{
"5 mins", "10 mins", "15 mins", "30 mins", "hourly", "3-hourly", "daily", "weekly"
};

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthProvider.GetAuthenticationStateAsync();
        var userId = auth.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        var client = ClientFactory.CreateClient("Default");
        config = await client.GetFromJsonAsync<UserConfig>($"/api/userconfig/{userId}") ?? new();
        isLoading = false;
    }

    private async Task SaveConfig()
    {
        var client = ClientFactory.CreateClient("Default");
        var response = await client.PutAsJsonAsync("/api/userconfig", config);

        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/watchlist");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"‚ùå Failed to save config. Error: {error}");
        }
    }


    private void Reset()
    {
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }
}
